/**
 * APIFiddle Sample Definition
 * Example workspace
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuestionChuDe model module.
 * @module model/QuestionChuDe
 * @version 0.0.0
 */
class QuestionChuDe {
    /**
     * Constructs a new <code>QuestionChuDe</code>.
     * @alias module:model/QuestionChuDe
     * @param chuDe {String} 
     * @param level {Number} 
     */
    constructor(chuDe, level) { 
        
        QuestionChuDe.initialize(this, chuDe, level);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chuDe, level) { 
        obj['chuDe'] = chuDe;
        obj['level'] = level;
    }

    /**
     * Constructs a <code>QuestionChuDe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionChuDe} obj Optional instance to populate.
     * @return {module:model/QuestionChuDe} The populated <code>QuestionChuDe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionChuDe();

            if (data.hasOwnProperty('chuDe')) {
                obj['chuDe'] = ApiClient.convertToType(data['chuDe'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionChuDe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionChuDe</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuestionChuDe.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chuDe'] && !(typeof data['chuDe'] === 'string' || data['chuDe'] instanceof String)) {
            throw new Error("Expected the field `chuDe` to be a primitive type in the JSON string but got " + data['chuDe']);
        }

        return true;
    }


}

QuestionChuDe.RequiredProperties = ["chuDe", "level"];

/**
 * @member {String} chuDe
 */
QuestionChuDe.prototype['chuDe'] = undefined;

/**
 * @member {Number} level
 */
QuestionChuDe.prototype['level'] = undefined;






export default QuestionChuDe;

