/**
 * APIFiddle Sample Definition
 * Example workspace
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Question from '../model/Question';
import QuestionCreate from '../model/QuestionCreate';
import QuestionUpdate from '../model/QuestionUpdate';
import ThemCauHoi401Response from '../model/ThemCauHoi401Response';
import XoaCauHoiForbidden from '../model/XoaCauHoiForbidden';
import XoaCauHoiUnauthorized from '../model/XoaCauHoiUnauthorized';

/**
* Question service.
* @module api/QuestionApi
* @version 0.0.0
*/
export default class QuestionApi {

    /**
    * Constructs a new QuestionApi. 
    * @alias module:api/QuestionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the capNhatCauHoi operation.
     * @callback module:api/QuestionApi~capNhatCauHoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cap nhat cau hoi
     * @param {String} questionId 
     * @param {module:model/QuestionUpdate} questionUpdate 
     * @param {module:api/QuestionApi~capNhatCauHoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Question}
     */
    capNhatCauHoi(questionId, questionUpdate, callback) {
      let postBody = questionUpdate;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling capNhatCauHoi");
      }
      // verify the required parameter 'questionUpdate' is set
      if (questionUpdate === undefined || questionUpdate === null) {
        throw new Error("Missing the required parameter 'questionUpdate' when calling capNhatCauHoi");
      }

      let pathParams = {
        'questionId': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Question;
      return this.apiClient.callApi(
        '/cau-hoi/{questionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themCauHoi operation.
     * @callback module:api/QuestionApi~themCauHoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Them cau hoi
     * @param {module:model/QuestionCreate} questionCreate 
     * @param {module:api/QuestionApi~themCauHoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Question}
     */
    themCauHoi(questionCreate, callback) {
      let postBody = questionCreate;
      // verify the required parameter 'questionCreate' is set
      if (questionCreate === undefined || questionCreate === null) {
        throw new Error("Missing the required parameter 'questionCreate' when calling themCauHoi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Question;
      return this.apiClient.callApi(
        '/cau-hoi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the xoaCauHoi operation.
     * @callback module:api/QuestionApi~xoaCauHoiCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Xoa cau hoi
     * @param {String} questionId 
     * @param {module:api/QuestionApi~xoaCauHoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    xoaCauHoi(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling xoaCauHoi");
      }

      let pathParams = {
        'questionId': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cau-hoi/{questionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
